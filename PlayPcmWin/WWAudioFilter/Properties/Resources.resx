<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ButtonAddNewFilter" xml:space="preserve">
    <value>Add new filter</value>
  </data>
  <data name="ButtonBrowseB" xml:space="preserve">
    <value>_Browse...</value>
  </data>
  <data name="ButtonDeleteSelected" xml:space="preserve">
    <value>Delete selected</value>
  </data>
  <data name="ButtonEditSelected" xml:space="preserve">
    <value>Edit selected</value>
  </data>
  <data name="ButtonLoadSettings" xml:space="preserve">
    <value>_Load settings...</value>
  </data>
  <data name="ButtonMoveDownSelected" xml:space="preserve">
    <value>Move down selected</value>
  </data>
  <data name="ButtonMoveUpSelected" xml:space="preserve">
    <value>Move up selected</value>
  </data>
  <data name="ButtonSaveSettingsAs" xml:space="preserve">
    <value>Save settings as...</value>
  </data>
  <data name="ButtonStartConversion" xml:space="preserve">
    <value>_Start conversion</value>
  </data>
  <data name="ButtonUseThisFilter" xml:space="preserve">
    <value>Use this filter</value>
  </data>
  <data name="ButtonBrowseR" xml:space="preserve">
    <value>B_rowse...</value>
  </data>
  <data name="CbItemFftUpsampler" xml:space="preserve">
    <value>FFT Upsampler</value>
  </data>
  <data name="CbItemZohUpsampler" xml:space="preserve">
    <value>Zero-Order Hold Upsampler</value>
  </data>
  <data name="DroppedDataIsNotFile" xml:space="preserve">
    <value>Dropped data is not file</value>
  </data>
  <data name="CbItemNoiseShaping2nd" xml:space="preserve">
    <value>2nd order</value>
  </data>
  <data name="CbItemNoiseShaping4th" xml:space="preserve">
    <value>4th order</value>
  </data>
  <data name="CbItemDownsamplerOption0" xml:space="preserve">
    <value>pick 1st sample from incoming f samples</value>
  </data>
  <data name="CbItemDownsamplerOption1" xml:space="preserve">
    <value>pick 2nd sample from incoming f samples</value>
  </data>
  <data name="CbItemDownsamplerType2x" xml:space="preserve">
    <value>2x</value>
  </data>
  <data name="CbItemCicTypeSingleStage" xml:space="preserve">
    <value>Single stage CIC</value>
  </data>
  <data name="CbItemInsertZeroesUpsampler" xml:space="preserve">
    <value>Insert Zeroes Upsampler</value>
  </data>
  <data name="CrossfeedDefaultExt" xml:space="preserve">
    <value>.txt</value>
  </data>
  <data name="CrossfeedFileFilter" xml:space="preserve">
    <value>Crossfeed Filter|*.cfeed</value>
  </data>
  <data name="CbItemLineDrawUpsampler" xml:space="preserve">
    <value>Linear interpolation Upsampler</value>
  </data>
  <data name="CbIteCubicHermiteSplineUpsampler" xml:space="preserve">
    <value>Cubic Hermite Spline upsampler</value>
  </data>
  <data name="cbItemWindowedSincUpsampler" xml:space="preserve">
    <value>Windowed Sinc Upsampler</value>
  </data>
  <data name="CbItemCicType3rdStage" xml:space="preserve">
    <value>3rd stage CIC</value>
  </data>
  <data name="Error" xml:space="preserve">
    <value>Error </value>
  </data>
  <data name="FilterReadAudioFiles" xml:space="preserve">
    <value>Audio files(*.wav, *.flac, *.dsf)|*.wav;*.flac;*.dsf</value>
  </data>
  <data name="FilterWriteAudioFiles" xml:space="preserve">
    <value>FLAC files (PCM)|*.flac|DSF files (1bit SDM)|*.dsf|WAVE files (PCM)|*.wav</value>
  </data>
  <data name="FilterWWAFilterFiles" xml:space="preserve">
    <value>WWAudioFilter files|*.wwaf</value>
  </data>
  <data name="GroupAddFundamentals" xml:space="preserve">
    <value>Add octave bass unison of the sound below 80Hz</value>
  </data>
  <data name="GroupAddGaussianNoise" xml:space="preserve">
    <value>Add Gaussian noise</value>
  </data>
  <data name="GroupAddJitter" xml:space="preserve">
    <value>Add Jitter</value>
  </data>
  <data name="GroupCic" xml:space="preserve">
    <value>CIC Filter</value>
  </data>
  <data name="GroupDownsampler" xml:space="preserve">
    <value>Downsampler</value>
  </data>
  <data name="GroupDynamicRangeCompression" xml:space="preserve">
    <value>Dynamic Range Compression</value>
  </data>
  <data name="GroupFilterSettings" xml:space="preserve">
    <value>Filter settings</value>
  </data>
  <data name="GroupFirstOrderAllPassIIR" xml:space="preserve">
    <value>First-order All-pass IIR Filter</value>
  </data>
  <data name="GroupGain" xml:space="preserve">
    <value>Gain</value>
  </data>
  <data name="GroupHalfbandFilter" xml:space="preserve">
    <value>Half-band Filter</value>
  </data>
  <data name="GroupInputFile" xml:space="preserve">
    <value>Input file</value>
  </data>
  <data name="GroupLog" xml:space="preserve">
    <value>Log</value>
  </data>
  <data name="GroupLPF" xml:space="preserve">
    <value>FIR Linear-Phase Low pass Filter</value>
  </data>
  <data name="GroupNoiseShaping" xml:space="preserve">
    <value>Noise Shaping</value>
  </data>
  <data name="GroupNormalizeFilter" xml:space="preserve">
    <value>Normalize</value>
  </data>
  <data name="GroupNosdacCompensationFilter" xml:space="preserve">
    <value>ZOH NOSDAC Frequency Response Compensation Filter</value>
  </data>
  <data name="GroupOutputFile" xml:space="preserve">
    <value>Output File</value>
  </data>
  <data name="GroupReduceBitDepth" xml:space="preserve">
    <value>Reduce bit depth</value>
  </data>
  <data name="GroupSecondOrderAllPassIIR" xml:space="preserve">
    <value>Second-order All-pass IIR Filter</value>
  </data>
  <data name="GroupSubsonicFilter" xml:space="preserve">
    <value>Subsonic Filter</value>
  </data>
  <data name="GroupTagEdit" xml:space="preserve">
    <value>Edit Tag</value>
  </data>
  <data name="GroupTimeReversalFilter" xml:space="preserve">
    <value>Time Reversal Filter</value>
  </data>
  <data name="GroupUpsampler" xml:space="preserve">
    <value>Upsampler</value>
  </data>
  <data name="LabelCicDelay" xml:space="preserve">
    <value>Delay:</value>
  </data>
  <data name="LabelCicDelaySamples" xml:space="preserve">
    <value>samples</value>
  </data>
  <data name="LabelCicFilterType" xml:space="preserve">
    <value>Type:</value>
  </data>
  <data name="LabelCutoffFreq" xml:space="preserve">
    <value>Cutoff frequency:</value>
  </data>
  <data name="LabelDownsamplerFactor" xml:space="preserve">
    <value>Factor (f) :</value>
  </data>
  <data name="LabelDownsamplerType" xml:space="preserve">
    <value>Type:</value>
  </data>
  <data name="LabelFilterLength" xml:space="preserve">
    <value>FIR filter length:</value>
  </data>
  <data name="LabelGainInAmplitude" xml:space="preserve">
    <value>Gain in Amplitude:</value>
  </data>
  <data name="LabelGainInDb" xml:space="preserve">
    <value>Gain in dB:</value>
  </data>
  <data name="LabelGainRolloffSlopes" xml:space="preserve">
    <value>Gain roll off slopes:</value>
  </data>
  <data name="LabelHalfBandFilterTaps" xml:space="preserve">
    <value>Filter taps:</value>
  </data>
  <data name="LabelInputFile" xml:space="preserve">
    <value>Input file:</value>
  </data>
  <data name="LabelNoiseShapingMethod" xml:space="preserve">
    <value>Noise shaping method:</value>
  </data>
  <data name="LabelNoiseShapingTargetBit" xml:space="preserve">
    <value>Target Quantized Bit Rate:</value>
  </data>
  <data name="LabelNormalizeAmplitude" xml:space="preserve">
    <value>Normalized amplitude (dBFS):</value>
  </data>
  <data name="LabelNosdacCompensationTaps" xml:space="preserve">
    <value>FIR filter taps:</value>
  </data>
  <data name="LabelOutputFile" xml:space="preserve">
    <value>Output file:</value>
  </data>
  <data name="LabelSamples" xml:space="preserve">
    <value>samples</value>
  </data>
  <data name="LabelSecondAllPassIirT" xml:space="preserve">
    <value>θ (degrees, -180 ≤ θ &lt; 180):</value>
  </data>
  <data name="LabelSubsonicFilterCutoffFrequency" xml:space="preserve">
    <value>Cutoff Frequency (Hz)</value>
  </data>
  <data name="LabelTagText" xml:space="preserve">
    <value>Text:</value>
  </data>
  <data name="LabelTagType" xml:space="preserve">
    <value>Tag type:</value>
  </data>
  <data name="LabelTargetBitDepth" xml:space="preserve">
    <value>Target bit depth (bit)</value>
  </data>
  <data name="LabelUpsamplerLength" xml:space="preserve">
    <value>Length:</value>
  </data>
  <data name="LabelUpsamplerType" xml:space="preserve">
    <value>Upsampler Type:</value>
  </data>
  <data name="LabelUpsamplingFactor" xml:space="preserve">
    <value>Upsampling factor:</value>
  </data>
  <data name="labelWindowedSincMethod" xml:space="preserve">
    <value>Windowed Sinc Method</value>
  </data>
  <data name="LabelX" xml:space="preserve">
    <value>x</value>
  </data>
  <data name="NothingToStore" xml:space="preserve">
    <value>Nothing to store.</value>
  </data>
  <data name="ErrorCicDelay" xml:space="preserve">
    <value>Please input Cic delay value in larger than 1 integer</value>
  </data>
  <data name="ErrorCrossfeedFile" xml:space="preserve">
    <value>Please specify crossfeed Filter file</value>
  </data>
  <data name="ErrorDynamicRangeCompressionLsbScaling" xml:space="preserve">
    <value>Error Dynamic range scaling lsb scaling value parse error</value>
  </data>
  <data name="ErrorFilterEmpty" xml:space="preserve">
    <value>Please add one or more filters</value>
  </data>
  <data name="ErrorFilterFileVersionMismatch" xml:space="preserve">
    <value>Filter file version mismatch. expected version={0}, file version={1}</value>
  </data>
  <data name="ErrorFirstOrderAllPassIIR" xml:space="preserve">
    <value>Error First order all-pass IIR a parameter</value>
  </data>
  <data name="ErrorFundamentalsGainValue" xml:space="preserve">
    <value>Please input fundamentals gain in number</value>
  </data>
  <data name="ErrorGainValueIsNan" xml:space="preserve">
    <value>Please input gain value in number</value>
  </data>
  <data name="ErrorGainValueIsTooSmall" xml:space="preserve">
    <value>Please input gain value larger than 0.0</value>
  </data>
  <data name="ErrorGaussianNoiseLevel" xml:space="preserve">
    <value>Gaussian noise level parse error.</value>
  </data>
  <data name="ErrorHalfbandTaps" xml:space="preserve">
    <value>Please input Filter taps value N where N+1 equals power of 4</value>
  </data>
  <data name="ErrorLpfCutoffFreqIsNan" xml:space="preserve">
    <value>Please input Low pass filter cutoff frequency in number</value>
  </data>
  <data name="ErrorLpfCutoffFreqIsNegative" xml:space="preserve">
    <value>Please input Low pass filter cutoff frequency larger than 0.0</value>
  </data>
  <data name="ErrorLpfSlopeIsNan" xml:space="preserve">
    <value>Please input Low pass filter slope in number</value>
  </data>
  <data name="ErrorLpfSlopeIsTooSmall" xml:space="preserve">
    <value>Please input Low pass filter slope larger than 1</value>
  </data>
  <data name="ErrorNoiseShapingBitIsNan" xml:space="preserve">
    <value>Prease input Target Quantization Bit Rate in number</value>
  </data>
  <data name="ErrorNoiseShapingBitIsOutOfRange" xml:space="preserve">
    <value>Prease input Target Quantization Bit Rate in integer in the range of 1 to 23</value>
  </data>
  <data name="ErrorNormalizeValue" xml:space="preserve">
    <value>Error normalize amplutude value must be number equals to or less than 0.0</value>
  </data>
  <data name="ErrorNotImplementedUpsampler" xml:space="preserve">
    <value>Error: Following upsamplers do not support non-power-of-2 upsample: FFT. Please select CubicHermiteSpline, LineDraw, InsertZeroes, WindowedSinc or ZOH. </value>
  </data>
  <data name="ErrorOutputDataTooLarge" xml:space="preserve">
    <value>Output data becomes too large! {0} Gbytes</value>
  </data>
  <data name="ErrorRpdfJitterAmount" xml:space="preserve">
    <value>RPDF Jitter Amount must be 0 or larger value</value>
  </data>
  <data name="ErrorSampleRateTooHigh" xml:space="preserve">
    <value>Error: sample rate is too high({0}Hz). FLAC supports up to 655,350Hz sample rate. WAVE supports up to 2,147,483,647Hz</value>
  </data>
  <data name="ErrorSampleValueClipped" xml:space="preserve">
    <value>Too large magnitude sample detected! channel={0}, magnitude={1:0.000}
</value>
  </data>
  <data name="ErrorSecondOrderAllPassIirR" xml:space="preserve">
    <value>Error Second order all-pass IIR r parameter</value>
  </data>
  <data name="ErrorSecondOrderAllPassIirT" xml:space="preserve">
    <value>Error Second order all-pass IIR θ parameter</value>
  </data>
  <data name="ErrorSinusolidalJitterAmount" xml:space="preserve">
    <value>Sinusoidal Jitter Amount must be 0 or larger value</value>
  </data>
  <data name="ErrorSinusolidalJitterFreq" xml:space="preserve">
    <value>Sinusoidal Jitter Freq must be 0 or larger value</value>
  </data>
  <data name="ErrorSubsonicFilterCutoffFrequency" xml:space="preserve">
    <value>Error: Subsonic filter cutoff frequency must greater than or equal to 1.0</value>
  </data>
  <data name="ErrorTargetBitDepth" xml:space="preserve">
    <value>Error: target bit depth b must number in the range:  1 ≤ b ≤ 23</value>
  </data>
  <data name="ErrorTimingErrorFile" xml:space="preserve">
    <value>Error: Timing Error audio data should have the same or more sample count than Input PCM data</value>
  </data>
  <data name="ErrorTimingErrorNanosec" xml:space="preserve">
    <value>Error: Jitter Timing Error scaling value should be a number</value>
  </data>
  <data name="ErrorTpdfJitterAmount" xml:space="preserve">
    <value>TPDF Jitter Amount must be 0 or larger value</value>
  </data>
  <data name="ErrorUnevenBitDacLsbScaling" xml:space="preserve">
    <value>Error uneven bit dac unevenness value parse error</value>
  </data>
  <data name="ErrorWriteToReadFile" xml:space="preserve">
    <value>Please specify different file to write. WWAudioFilter cannot write to input file.</value>
  </data>
  <data name="LogCompleted" xml:space="preserve">
    <value>Completed. Elapsed time: {0}
</value>
  </data>
  <data name="LogFileReadCompleted" xml:space="preserve">
    <value>Read completed. 
Processing...
</value>
  </data>
  <data name="LogFileReadStarted" xml:space="preserve">
    <value>Reading file {0} ...
</value>
  </data>
  <data name="LogfileWriteStarted" xml:space="preserve">
    <value>Process completed. Writing to {0} ...
</value>
  </data>
  <data name="ErrorRandomNoiseLevel" xml:space="preserve">
    <value>Random noise level parse error.</value>
  </data>
  <data name="ErrorWriteFormatMismatch" xml:space="preserve">
    <value>Error: Write File type and sample format mismatched!</value>
  </data>
</root>